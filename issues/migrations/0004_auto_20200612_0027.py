# Generated by Django 3.0.7 on 2020-06-12 00:27

import django.contrib.postgres.indexes
import django.contrib.postgres.search
from django.db import migrations, models
import django.utils.timezone
from .sql.triggers import update_issue_trigger


class Migration(migrations.Migration):

    dependencies = [
        ("issues", "0003_event_search_vector"),
    ]

    migration = (
        """
        DROP TRIGGER IF EXISTS event_search_vector_update on issues_event;
        DROP FUNCTION IF EXISTS data_to_search_vector;
        """
        + update_issue_trigger
    )

    reverse_migration = """
        DROP TRIGGER IF EXISTS event_issue_update on issues_event;
        DROP FUNCTION IF EXISTS update_issue;
    """

    operations = [
        migrations.RemoveIndex(model_name="event", name="search_vector_idx",),
        migrations.RemoveField(model_name="event", name="search_vector",),
        migrations.AddField(
            model_name="issue",
            name="count",
            field=models.PositiveIntegerField(default=1, editable=False),
        ),
        migrations.AddField(
            model_name="issue",
            name="last_seen",
            field=models.DateTimeField(
                auto_now_add=True, default=django.utils.timezone.now
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="issue",
            name="search_vector",
            field=django.contrib.postgres.search.SearchVectorField(
                editable=False, null=True
            ),
        ),
        migrations.AddIndex(
            model_name="issue",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_vector"], name="search_vector_idx"
            ),
        ),
        migrations.RunSQL(migration, reverse_migration),
    ]
